/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Views;

import ConexaoPostgres.Conexao;
import codigo.OperacoesBancoDeDados;
import codigo.PermissaoAcesso;
import java.awt.Dimension;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author USUARIO
 */
public class TelaCadastrarCurso extends javax.swing.JInternalFrame {

    String idCurso = "";//id do curso a ser atualizado ou excluido
    String info2 = "";//auxiliar para buscar o id do curso a ser atualizado ou excluido

    /**
     * Creates new form TelaCadastrarCurso
     */
    public TelaCadastrarCurso() {
        initComponents();
    }

    /**
     * Dimensionar a tela no centro.
     */
    public void setPosicao() {
        Dimension d = this.getDesktopPane().getSize();
        this.setLocation((d.width - this.getSize().width) / 2, (d.height - this.getSize().height) / 2);
    }

    /**
     * Determinar visibilidade de botões.
     *
     * @param b
     */
    public void setBotoes(boolean b) {
        jButtonExcluir.setVisible(b);
        jButtonAtualizar.setVisible(b);
    }

    /**
     * Verificação do nome de entrada na função Atualizar/Excluir.
     *
     * @param n
     */
    public void AttExcluir(String n) {
        
        jTextCHTeorica.setVisible(false);
        jTextCHPratica.setVisible(false);
        jLabel2.setVisible(false);
        jLabel3.setVisible(false);
        
        info2 = n;
        String nome = "", cargaH = "", resumo = "";
        String verificaMaqtriz;

        int aux = 0;
        ResultSet rs = null;

        Conexao con = new Conexao();

        verificaMaqtriz = "SELECT * "
                + "FROM cursos C,oferece O,auto_escola A "
                + "WHERE C.id_curso=O.id_curso AND O.id_aut=" + PermissaoAcesso.getIdAutoEscola();
        rs = con.executaBusca(verificaMaqtriz);
        try {
            while (rs.next()) {
                idCurso = rs.getString("id_curso");
                nome = rs.getString("nome");
                cargaH = rs.getString("carga_horaria_exigida");
                resumo = rs.getString("resumo_conteudo");
            }

            //verifica se o curso procurado esta no sistema
            if (nome.equals(n)) {
                aux = 1;
            }

        } catch (SQLException ex) {
            Logger.getLogger(TelaCadastrarCurso.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (aux == 1) {   //existe cadastro para curso procurado
            jButtonSalvar.setVisible(false);//para não adicionar nova linha ao invés de salvar
            jTNomeCurso.setText(nome);
            jTCargaHor.setText(cargaH);
            jTResumoC.setText(resumo);

        } else {       //caso não exista o curso cadastrado

            JOptionPane.showMessageDialog(null, "Não existe cadastro para esse nome!");
            setBotoes(false);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabelTitulo = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTNomeCurso = new javax.swing.JTextField();
        jTCargaHor = new javax.swing.JTextField();
        jButtonSalvar = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();
        jButtonExcluir = new javax.swing.JButton();
        jButtonAtualizar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextCHTeorica = new javax.swing.JTextField();
        jTextCHPratica = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTResumoC = new javax.swing.JTextArea();

        setClosable(true);
        setTitle("Cadastro de Cursos");

        jLabelTitulo.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelTitulo.setText("Cadastrar Curso");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Nome:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Carga Horária Exigida:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Resumo Conteúdo:");

        jTNomeCurso.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jTCargaHor.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jButtonSalvar.setText("Salvar");
        jButtonSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalvarActionPerformed(evt);
            }
        });

        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        jButtonExcluir.setText("Excluir");
        jButtonExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExcluirActionPerformed(evt);
            }
        });

        jButtonAtualizar.setText("Atualizar");
        jButtonAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAtualizarActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Carga horária Teórica:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Carga horária Prática:");

        jTextCHTeorica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextCHTeoricaActionPerformed(evt);
            }
        });

        jTextCHPratica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextCHPraticaActionPerformed(evt);
            }
        });

        jTResumoC.setColumns(20);
        jTResumoC.setRows(5);
        jScrollPane2.setViewportView(jTResumoC);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(170, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabelTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(268, 268, 268))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(jButtonExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(jButtonAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(jButtonSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jTextCHTeorica, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jTextCHPratica))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(jTCargaHor, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jTNomeCurso))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabelTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTNomeCurso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTCargaHor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextCHTeorica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jTextCHPratica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Quando o botão salvar for pressionado
     *
     * @param evt
     */
    private void jButtonSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalvarActionPerformed
        // TODO add your handling code here:
        String nome = jTNomeCurso.getText();
        String cargaH = jTCargaHor.getText();
        String resumo = jTResumoC.getText();
        String chp = jTextCHTeorica.getText();
        String cht = jTextCHPratica.getText();
        
        
        int idCurso = 0;
        String verificaMaqtriz;
        String tabela = "";
        String valores = "";

        int aux = 0, resultado1 = 0, resultado2 = 0;
        ResultSet rs = null;

        Conexao con = new Conexao();

        if ((!nome.equals("")) && (!cargaH.equals("")) && (!resumo.equals(""))) { //verifica se todos os campos foram preenchidos
            verificaMaqtriz = "SELECT C.nome "
                    + "FROM cursos C,oferece O,auto_escola A "
                    + "WHERE C.id_curso=O.id_curso AND O.id_aut=" + PermissaoAcesso.getIdAutoEscola();
            rs = con.executaBusca(verificaMaqtriz);
            try {
                while (rs.next()) {
                    //verifica se o curso já está cadastrado
                    if (rs.getString("nome").equals(nome)) {
                        aux = 1;
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(TelaCadastrarCurso.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (aux == 1) {   //se existir mesmo curso cadastraado
                JOptionPane.showMessageDialog(null, "O nome deste curso já está cadastrado!");
                jTNomeCurso.setText("");
            } else {       //caso não exista o curso cadastrado para essa autoescola
                verificaMaqtriz = "SELECT id_curso,nome "
                        + "FROM cursos";
                con = new Conexao();
                rs = con.executaBusca(verificaMaqtriz);
                try {
                    while (rs.next()) {
                        //verifica se o curso já está cadastrado
                        idCurso = rs.getInt("id_curso");
                        if (rs.getString("nome").equals(nome)) {
                            aux = 2;
                        }

                    }
                } catch (SQLException ex) {
                    Logger.getLogger(TelaCadastrarCurso.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (aux == 0) {
                    OperacoesBancoDeDados inserir = new OperacoesBancoDeDados();
                    tabela = "cursos(id_curso, nome, carga_horaria_exigida,resumo_conteudo,ch_curso_pratico,ch_curso_teorico)";
                    valores = "(" + "default" + ",'" + nome + "','" + cargaH + "','" + resumo + "','"+chp+"','"+cht+"')";

                    resultado1 = inserir.inserirLinhasBD(tabela, valores);

                    //buscar o id do curso que acabou de ser cadastrado
                    if (resultado1 > 0) {
                        String buscaIdCurso = "SELECT id_curso FROM cursos WHERE nome='" + nome + "'";
                        rs = null;
                        con = new Conexao();
                        rs = con.executaBusca(buscaIdCurso);
                        try {
                            while (rs.next()) {
                                idCurso = rs.getInt("id_curso");
                                System.out.println("id_curso: " + idCurso);

                            }

                        } catch (SQLException ex) {
                            ex.printStackTrace();
                        }

                        //vincular o curso a autoescola
                        if (idCurso > 0) {
                            String tabela1 = "oferece(id_aut,id_curso)";
                            String valores1 = "(" + PermissaoAcesso.getIdAutoEscola() + "," + idCurso + ")";
                            System.out.println("id_aut=" + PermissaoAcesso.getIdAutoEscola());
                            resultado2 = inserir.inserirLinhasBD(tabela1, valores1);
                        }
                        if (resultado2 > 0) {
                            JOptionPane.showMessageDialog(null, "Cadastro concluido com sucesso!");
                            jTNomeCurso.setText("");
                            jTCargaHor.setText("");
                            jTResumoC.setText("");
                            jTextCHTeorica.setText("");
                            jTextCHPratica.setText("");
                        } else {
                            //como inseriu o curso mas não conseguiu vincular a autoescola, exclui o curso
                            OperacoesBancoDeDados excluirRegistro = new OperacoesBancoDeDados();
                            String condicao = "id_curso=" + idCurso;
                            int resultado = excluirRegistro.deletarLinhasBD(tabela, condicao);
                            if (resultado < 0) {
                                JOptionPane.showMessageDialog(null, "Cadastro mal sucedido! Favor contatar o técnico para verificar situação!");
                                this.dispose();
                            } else {
                                JOptionPane.showMessageDialog(null, "Erro durante Cadastrado. Tente novamente!");
                            }
                        }
                    }
                } else if (aux == 2) {//curso já cadastrado para outra autoescola
                    OperacoesBancoDeDados inserir = new OperacoesBancoDeDados();
                    //buscar id do curso existente
                    String buscaIdCurso = "SELECT id_curso FROM cursos WHERE nome='" + nome + "'";
                    rs = null;
                    con = new Conexao();
                    rs = con.executaBusca(buscaIdCurso);
                    try {
                        while (rs.next()) {
                            idCurso = rs.getInt("id_curso");
                            System.out.println("id_curso: " + idCurso);

                        }

                    } catch (SQLException ex) {
                        ex.printStackTrace();
                    }
                    //vincular o curso a autoescola
                    if (idCurso > 0) {
                        String tabela1 = "oferece(id_aut,id_curso)";
                        String valores1 = "(" + PermissaoAcesso.getIdAutoEscola() + "," + idCurso + ")";
                        System.out.println("id_aut=" + PermissaoAcesso.getIdAutoEscola());
                        resultado2 = inserir.inserirLinhasBD(tabela1, valores1);
                    }
                    if (resultado2 > 0) {
                        JOptionPane.showMessageDialog(null, "Cadastro concluido com sucesso!");
                        jTNomeCurso.setText("");
                        jTCargaHor.setText("");
                        jTResumoC.setText("");
                    } else {
                        JOptionPane.showMessageDialog(null, "Erro durante Cadastrado. Tente novamente!");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Erro durante Cadastrado. Tente novamente!");
                }
            }

        } else {
            JOptionPane.showMessageDialog(null, "Ainda há dados para serem preenchidos!");
        }


    }//GEN-LAST:event_jButtonSalvarActionPerformed

    /**
     * Ação para excluir ao clicar no botão.
     *
     * @param evt
     */
    private void jButtonExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExcluirActionPerformed
        // TODO add your handling code here:
        String nome = jTNomeCurso.getText();
        String cargaH = jTCargaHor.getText();
        String resumo = jTResumoC.getText();
        int resultado1 = 0, resultado2 = 0;

        OperacoesBancoDeDados excluir = new OperacoesBancoDeDados();
        String tabela1 = "cursos";
        String tabela2 = "oferece";
        String condicao = "id_curso='" + idCurso + "'";
        TelaPrincipal.info = info2;
        resultado1 = excluir.deletarLinhasBD(tabela2, condicao);

        if (resultado1 > 0) {
            resultado2 = excluir.deletarLinhasBD(tabela1, condicao);
            if (resultado2 > 0) {
                JOptionPane.showMessageDialog(null, "Excluido com sucesso");
                jTNomeCurso.setText("");
                jTCargaHor.setText("");
                jTResumoC.setText("");
                this.dispose();
                TelaPrincipal.info = null;
            } else {
                JOptionPane.showMessageDialog(null, "Exclusão não efetuada com sucesso. Favor contatar o técnico para verificar a situação!");
                this.dispose();
                TelaPrincipal.info = null;
            }
        } else {
            JOptionPane.showMessageDialog(null, "Erro durante a exclusão. Tente novamente!");
        }
    }//GEN-LAST:event_jButtonExcluirActionPerformed

    /**
     * Ação ao clicar no botão Atualizar.
     *
     * @param evt
     */
    private void jButtonAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAtualizarActionPerformed

        //Atualiza os dados
        String nome = jTNomeCurso.getText(), cargaH = jTCargaHor.getText(), resumo = jTResumoC.getText();
        OperacoesBancoDeDados atualizaDados = new OperacoesBancoDeDados();
        String tabela = "cursos";
        String condicao = "id_curso='" + idCurso + "'";

        int res1 = atualizaDados.atualizarLinhasBD(tabela, "nome", "'" + nome + "'", condicao);
        int res2 = atualizaDados.atualizarLinhasBD(tabela, "carga_horaria_exigida", "'" + cargaH + "'", condicao);
        int res3 = atualizaDados.atualizarLinhasBD(tabela, "resumo_conteudo", "'" + resumo + "'", condicao);
        if (res1 > 0 && res2 > 0 && res3 > 0) {
            JOptionPane.showMessageDialog(null, "Atualização realizada com sucesso!");
            this.dispose();
            jButtonSalvar.setVisible(true);//para não adicionar nova linha ao invés de salvar
        } else {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro!!! Feche a janela, abra novamente, confira os dados atualizados e tente outra vez!");
        }
    }//GEN-LAST:event_jButtonAtualizarActionPerformed

    /**
     * Ação ao clicar no botão cancelar.
     *
     * @param evt
     */
    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButtonCancelarActionPerformed

    private void jTextCHTeoricaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextCHTeoricaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextCHTeoricaActionPerformed

    private void jTextCHPraticaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextCHPraticaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextCHPraticaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAtualizar;
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonExcluir;
    private javax.swing.JButton jButtonSalvar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabelTitulo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTCargaHor;
    private javax.swing.JTextField jTNomeCurso;
    private javax.swing.JTextArea jTResumoC;
    private javax.swing.JTextField jTextCHPratica;
    private javax.swing.JTextField jTextCHTeorica;
    // End of variables declaration//GEN-END:variables
}


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Views;

import ConexaoPostgres.Conexao;
import codigo.OperacoesBancoDeDados;
import codigo.PermissaoAcesso;
import java.awt.Dimension;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author USUARIO
 */
public class TelaCadastrarFuncionario extends javax.swing.JInternalFrame {

    /**
     * Creates new form TelaCadastrarInstrutor
     */
    String tipoCadastro;
    String procurAux;

    public TelaCadastrarFuncionario() {
        initComponents();
        //inicializar a tela com todos os componentes invisíveis
        jPanelDadosPessoais.setVisible(false);
        jPanelContato.setVisible(false);
        jPanelExtra.setVisible(false);

    }

    /**
     * Dimensionar a tela no centro.
     */
    public void setPosicao() {
        Dimension d = this.getDesktopPane().getSize();
        this.setLocation((d.width - this.getSize().width) / 2, (d.height - this.getSize().height) / 2);
    }

    public void botoes(boolean b) {
        jButtonExcluir.setVisible(b);
        jButtonAtualizar.setVisible(b);
        jButtonSalvar.setVisible(!b);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        jComboBoxDesejaCadastrar = new javax.swing.JComboBox<>();
        jButtonIrCadastro = new javax.swing.JButton();
        jPanelDadosPessoais = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jFCPF = new javax.swing.JFormattedTextField();
        jComboBoxSexo = new javax.swing.JComboBox<>();
        jTextNome = new javax.swing.JTextField();
        jTextIdentidade = new javax.swing.JTextField();
        jTextOrgao = new javax.swing.JTextField();
        jFDataEmissao = new javax.swing.JFormattedTextField();
        jFDataNasc = new javax.swing.JFormattedTextField();
        jComboNivelEsc = new javax.swing.JComboBox<>();
        jFDataDemissao = new javax.swing.JFormattedTextField();
        jFDataAdmissao = new javax.swing.JFormattedTextField();
        jPanelContato = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jTextRua = new javax.swing.JTextField();
        jTextNumero = new javax.swing.JTextField();
        jTextCEP = new javax.swing.JTextField();
        jTextBairro = new javax.swing.JTextField();
        jTextCidade = new javax.swing.JTextField();
        jFTelefone1 = new javax.swing.JFormattedTextField();
        jTextEmail = new javax.swing.JTextField();
        jFTelefone2 = new javax.swing.JFormattedTextField();
        jButtonSalvar = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();
        jButtonAtualizar = new javax.swing.JButton();
        jButtonExcluir = new javax.swing.JButton();
        jPanelExtra = new javax.swing.JPanel();
        jLabelCarteira = new javax.swing.JLabel();
        jCheckBoxD = new javax.swing.JCheckBox();
        jCheckBoxE = new javax.swing.JCheckBox();
        jLabelfuncao = new javax.swing.JLabel();
        jComboBoxFuncao = new javax.swing.JComboBox<>();
        jLabelNumReg = new javax.swing.JLabel();
        jTexNumReg = new javax.swing.JTextField();
        jLabelCap = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextCapacitacao = new javax.swing.JTextArea();
        jLabelcurso = new javax.swing.JLabel();
        jComboBoxcurso = new javax.swing.JComboBox<>();

        setClosable(true);
        setTitle("Cadastrar Funcionário");
        setPreferredSize(new java.awt.Dimension(1214, 600));

        jLabel23.setText("Deseja Cadastrar?");

        jComboBoxDesejaCadastrar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECIONE", "ADMINISTRATIVO", "INSTRUTOR" }));
        jComboBoxDesejaCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDesejaCadastrarActionPerformed(evt);
            }
        });

        jButtonIrCadastro.setText("Ir para cadastro");
        jButtonIrCadastro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonIrCadastroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel23)
                .addGap(53, 53, 53)
                .addComponent(jComboBoxDesejaCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(116, 116, 116)
                .addComponent(jButtonIrCadastro, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(jComboBoxDesejaCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonIrCadastro)))
        );

        jPanelDadosPessoais.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Dados Pessoais", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        jPanelDadosPessoais.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("CPF:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Nome:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Identidade:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Data de emissão:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("Órgao Expedidor:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setText("Data Nascimento:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel9.setText("Sexo:");

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel15.setText("Data admissão:");

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel16.setText("Data demissão:");

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel17.setText("Nível de escolaridade:");

        try {
            jFCPF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jComboBoxSexo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECIONE", "F", "M" }));

        try {
            jFDataEmissao.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        try {
            jFDataNasc.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jComboNivelEsc.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECIONE", "ENSINO BÁSICO INCOMPLETO ", "ENSINO BÁSICO COMPLETO", "ENSINO MÉDIO INCOMPLETO", "ENSINO MÉDIO COMPLETO", "ENSINO TÉCNICO INCOMPLETO", "ENSINO TÉCNICO COMPLETO", "ENSINO SUPERIOR INCOMPLETO", "ENSINO SUPERIOR COMPLETO" }));

        try {
            jFDataDemissao.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        try {
            jFDataAdmissao.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        javax.swing.GroupLayout jPanelDadosPessoaisLayout = new javax.swing.GroupLayout(jPanelDadosPessoais);
        jPanelDadosPessoais.setLayout(jPanelDadosPessoaisLayout);
        jPanelDadosPessoaisLayout.setHorizontalGroup(
            jPanelDadosPessoaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDadosPessoaisLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelDadosPessoaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelDadosPessoaisLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jFCPF)
                        .addGap(50, 50, 50)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBoxSexo, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelDadosPessoaisLayout.createSequentialGroup()
                        .addGroup(jPanelDadosPessoaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelDadosPessoaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextIdentidade)
                            .addComponent(jTextNome)))
                    .addGroup(jPanelDadosPessoaisLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jFDataEmissao, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextOrgao, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE))
                    .addGroup(jPanelDadosPessoaisLayout.createSequentialGroup()
                        .addGroup(jPanelDadosPessoaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelDadosPessoaisLayout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jFDataAdmissao, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelDadosPessoaisLayout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jFDataDemissao, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelDadosPessoaisLayout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jFDataNasc, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelDadosPessoaisLayout.createSequentialGroup()
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboNivelEsc, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelDadosPessoaisLayout.setVerticalGroup(
            jPanelDadosPessoaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDadosPessoaisLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelDadosPessoaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel9)
                    .addComponent(jFCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSexo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelDadosPessoaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelDadosPessoaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextIdentidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelDadosPessoaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jFDataEmissao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jTextOrgao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelDadosPessoaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jFDataNasc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelDadosPessoaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(jComboNivelEsc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelDadosPessoaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jFDataAdmissao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelDadosPessoaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jFDataDemissao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanelContato.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Contato", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel11.setText("Rua:");

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel12.setText("Número:");

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel13.setText("Bairro:");

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel14.setText("Cidade:");

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel18.setText("Telefone 1:");

        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel19.setText("Telefone 2:");

        jLabel20.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel20.setText("CEP:");

        jLabel21.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel21.setText("E-mail:");

        jTextRua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextRuaActionPerformed(evt);
            }
        });

        try {
            jFTelefone1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##)#####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        try {
            jFTelefone2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##)#####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jButtonSalvar.setText("Salvar");
        jButtonSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalvarActionPerformed(evt);
            }
        });

        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        jButtonAtualizar.setText("Atualizar");
        jButtonAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAtualizarActionPerformed(evt);
            }
        });

        jButtonExcluir.setText("Excluir");
        jButtonExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExcluirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelContatoLayout = new javax.swing.GroupLayout(jPanelContato);
        jPanelContato.setLayout(jPanelContatoLayout);
        jPanelContatoLayout.setHorizontalGroup(
            jPanelContatoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelContatoLayout.createSequentialGroup()
                .addGroup(jPanelContatoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelContatoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanelContatoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelContatoLayout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextRua, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel10)
                            .addGroup(jPanelContatoLayout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addGap(18, 18, 18)
                                .addComponent(jTextNumero, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelContatoLayout.createSequentialGroup()
                                .addComponent(jLabel20)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextCEP, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelContatoLayout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextBairro, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelContatoLayout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelContatoLayout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jFTelefone1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelContatoLayout.createSequentialGroup()
                                .addComponent(jLabel19)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jFTelefone2, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelContatoLayout.createSequentialGroup()
                                .addComponent(jLabel21)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanelContatoLayout.createSequentialGroup()
                        .addComponent(jButtonCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonExcluir, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanelContatoLayout.setVerticalGroup(
            jPanelContatoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelContatoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelContatoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jTextRua, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanelContatoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addGroup(jPanelContatoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel12)
                        .addComponent(jTextNumero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelContatoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(jTextCEP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelContatoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jTextBairro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelContatoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jTextCidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelContatoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jFTelefone1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelContatoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(jFTelefone2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelContatoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(jTextEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(jPanelContatoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelContatoLayout.createSequentialGroup()
                        .addComponent(jButtonSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanelContatoLayout.createSequentialGroup()
                        .addGroup(jPanelContatoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButtonExcluir, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanelContatoLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1, Short.MAX_VALUE)
                                .addGroup(jPanelContatoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButtonCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(39, 39, 39))))
        );

        jLabelCarteira.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelCarteira.setText("Carteira:");

        jCheckBoxD.setText("D");

        jCheckBoxE.setText("E");

        jLabelfuncao.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelfuncao.setText("Função:");

        jComboBoxFuncao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECIONE", "DIRETOR GERAL", "DIRETOR DE ENSINO" }));

        jLabelNumReg.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelNumReg.setText("Número do registro:");

        jLabelCap.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelCap.setText("Capacitação:");

        jTextCapacitacao.setColumns(20);
        jTextCapacitacao.setRows(5);
        jScrollPane2.setViewportView(jTextCapacitacao);

        jLabelcurso.setText("Curso:");

        jComboBoxcurso.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TEORICO", "PRATICO" }));

        javax.swing.GroupLayout jPanelExtraLayout = new javax.swing.GroupLayout(jPanelExtra);
        jPanelExtra.setLayout(jPanelExtraLayout);
        jPanelExtraLayout.setHorizontalGroup(
            jPanelExtraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelExtraLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanelExtraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelExtraLayout.createSequentialGroup()
                        .addComponent(jLabelCarteira)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBoxD)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBoxE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelfuncao)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxFuncao, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelcurso)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxcurso, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanelExtraLayout.createSequentialGroup()
                        .addComponent(jLabelCap)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 525, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelExtraLayout.createSequentialGroup()
                        .addComponent(jLabelNumReg)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTexNumReg, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanelExtraLayout.setVerticalGroup(
            jPanelExtraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelExtraLayout.createSequentialGroup()
                .addGroup(jPanelExtraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCarteira)
                    .addComponent(jCheckBoxD)
                    .addComponent(jCheckBoxE)
                    .addComponent(jComboBoxFuncao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelfuncao)
                    .addComponent(jLabelcurso)
                    .addComponent(jComboBoxcurso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelExtraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNumReg)
                    .addComponent(jTexNumReg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelExtraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelCap)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 19, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanelExtra, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanelDadosPessoais, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelContato, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelDadosPessoais, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanelExtra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanelContato, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void AtualizarExcluir(String tipo, String cpfProcura) {
        this.tipoCadastro = tipo;
        this.procurAux = cpfProcura;
        jButtonSalvar.setVisible(false);
        String verificaMatriz, verificaMatriz2;

        int aux = 0;
        ResultSet rs = null;
        ResultSet rs2 = null;
        Conexao con = new Conexao();
        Conexao con2 = new Conexao();
        
        Date date = null;
        String formato = "dd/MM/yyyy HH:mm";
        SimpleDateFormat formatter = new SimpleDateFormat(formato);

        switch (tipo) {
            case "ADMINISTRATIVO": {
                jPanel1.setVisible(false);
                jPanelDadosPessoais.setVisible(true);
                jPanelContato.setVisible(true);
                jPanelExtra.setVisible(false);

                verificaMatriz2 = "SELECT * "
                        + "FROM atendente "
                        + "WHERE cpf_func=" + "'" + cpfProcura + "'";

                verificaMatriz = "SELECT * "
                        + "FROM funcionario "
                        + "WHERE id_aut=" + PermissaoAcesso.getIdAutoEscola() + "AND" + " cpf_func=" + "'" + cpfProcura + "'";

                rs = con.executaBusca(verificaMatriz);
                rs2 = con2.executaBusca(verificaMatriz2);

                try {
                    if (rs2.next()) {
                        if (rs.next()) {
                            this.setVisible(true);
                            jFCPF.setText(rs.getString("cpf_func"));
                            jTextNome.setText(rs.getString("nome"));
                            jTextIdentidade.setText(rs.getString("car_numero"));
                            jFDataEmissao.setText(rs.getString("car_data_de_emissao"));
                            jFDataNasc.setText(rs.getString("data_nascimento"));
                            jComboBoxSexo.setSelectedItem(rs.getString("sexo"));
                            jTextOrgao.setText(rs.getString("car_orgao_expedidor"));
                            jComboNivelEsc.setSelectedItem(rs.getString("nivel_escolaridade"));
                            jFDataAdmissao.setText(rs.getString("data_de_admissao"));
                            jFDataDemissao.setText(rs.getString("data_de_demissao"));

                            jTextRua.setText(rs.getString("end_rua"));
                            jTextBairro.setText(rs.getString("end_bairro"));
                            jTextNumero.setText(rs.getString("end_numero"));
                            jTextCEP.setText(rs.getString("end_cep"));
                            jTextCidade.setText(rs.getString("end_cidade"));

                            jFTelefone1.setText(rs.getString("tel_telefone1"));
                            jFTelefone2.setText(rs.getString("tel_telefone2"));
                            jTextEmail.setText(rs.getString("e_mail"));
                            aux = 1;
                        }
                    }

                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Erro ao manipular dados, verifique os dados");
                    //Logger.getLogger(TelaCadastrarCurso.class.getName()).log(Level.SEVERE, null, ex);
                } catch (NullPointerException ex) {

                }
                break;
            }
            case "INSTRUTOR": {
                jPanel1.setVisible(false);
                jPanelDadosPessoais.setVisible(true);
                jPanelContato.setVisible(true);
                jPanelExtra.setVisible(true);
                jLabelfuncao.setVisible(false);
                jComboBoxFuncao.setVisible(false);

                verificaMatriz2 = "SELECT * "
                        + "FROM instrutor "
                        + "WHERE cpf_func=" + "'" + cpfProcura + "'";

                verificaMatriz = "SELECT * "
                        + "FROM funcionario "
                        + "WHERE id_aut=" + PermissaoAcesso.getIdAutoEscola() + "AND" + " cpf_func=" + "'" + cpfProcura + "'";

                rs = con.executaBusca(verificaMatriz);
                rs2 = con2.executaBusca(verificaMatriz2);

                try {
                    //resgata os dados na tabela instrutor
                    if (rs2.next()) {
                        this.setVisible(true);
                        jFCPF.setText(rs2.getString("cpf_func"));
                        jComboBoxDesejaCadastrar.setSelectedItem(rs2.getString("tipo"));
                        jTextCapacitacao.setText(rs2.getString("capacitacao"));
                        jTexNumReg.setText(rs2.getString("car_numero_registro"));
                        String carteira = rs2.getString("car_categorias");
                        if (carteira.equals("D")) {
                            jCheckBoxD.setSelected(true);
                        } else {
                            jCheckBoxE.setSelected(true);
                        }

                        //resgata os dados na tabela funcionario
                        if (rs.next()) {

                            jTextNome.setText(rs.getString("nome"));
                            jTextIdentidade.setText(rs.getString("car_numero"));
                            jFDataEmissao.setText(rs.getString("car_data_de_emissao"));
                            jFDataNasc.setText(rs.getString("data_nascimento"));
                            jComboBoxSexo.setSelectedItem(rs.getString("sexo"));
                            jTextOrgao.setText(rs.getString("car_orgao_expedidor"));
                            jComboNivelEsc.setSelectedItem(rs.getString("nivel_escolaridade"));
                            jFDataAdmissao.setText(rs.getString("data_de_admissao"));
                            jFDataDemissao.setText(rs.getString("data_de_demissao"));

                            jTextRua.setText(rs.getString("end_rua"));
                            jTextBairro.setText(rs.getString("end_bairro"));
                            jTextNumero.setText(rs.getString("end_numero"));
                            jTextCEP.setText(rs.getString("end_cep"));
                            jTextCidade.setText(rs.getString("end_cidade"));

                            jFTelefone1.setText(rs.getString("tel_telefone1"));
                            jFTelefone2.setText(rs.getString("tel_telefone2"));
                            jTextEmail.setText(rs.getString("e_mail"));
                            aux = 1;
                        }

                    }

                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Erro ao manipular dados, verifique os dados");
                    //Logger.getLogger(TelaCadastrarCurso.class.getName()).log(Level.SEVERE, null, ex);
                } catch (NullPointerException ex) {

                }

                break;
            }
            case "DIRETOR": {
                jPanel1.setVisible(false);
                jPanelDadosPessoais.setVisible(true);
                jPanelContato.setVisible(true);
                jPanelExtra.setVisible(true);
                jLabelCarteira.setVisible(false);

                jCheckBoxD.setVisible(false);
                jCheckBoxE.setVisible(false);

                jPanel1.setVisible(false);
                jPanelDadosPessoais.setVisible(true);
                jPanelContato.setVisible(true);
                jPanelExtra.setVisible(true);
                jLabelfuncao.setVisible(true);
                jComboBoxFuncao.setVisible(true);
                jTexNumReg.setVisible(false);
                jLabelNumReg.setVisible(false);

                verificaMatriz2 = "SELECT * "
                        + "FROM diretor "
                        + "WHERE cpf_func=" + "'" + cpfProcura + "'";

                verificaMatriz = "SELECT * "
                        + "FROM funcionario "
                        + "WHERE id_aut=" + PermissaoAcesso.getIdAutoEscola() + "AND" + " cpf_func=" + "'" + cpfProcura + "'";

                rs = con.executaBusca(verificaMatriz);
                rs2 = con2.executaBusca(verificaMatriz2);

                try {
                    //resgata os dados na tabela diretor
                    if (rs2.next()) {
                        this.setVisible(true);
                        jFCPF.setText(rs2.getString("cpf_func"));
                        jTextCapacitacao.setText(rs2.getString("capacitacao"));
                        jComboBoxFuncao.setSelectedItem(rs2.getString("funcao"));

                        //resgata os dados na tabela funcionario
                        if (rs.next()) {

                            jTextNome.setText(rs.getString("nome"));
                            jTextIdentidade.setText(rs.getString("car_numero"));
                            jFDataEmissao.setText(rs.getString("car_data_de_emissao"));
                            jFDataNasc.setText(rs.getString("data_nascimento"));
                            jComboBoxSexo.setSelectedItem(rs.getString("sexo"));
                            jTextOrgao.setText(rs.getString("car_orgao_expedidor"));
                            jComboNivelEsc.setSelectedItem(rs.getString("nivel_escolaridade"));
                            jFDataAdmissao.setText(rs.getString("data_de_admissao"));
                            jFDataDemissao.setText(rs.getString("data_de_demissao"));

                            jTextRua.setText(rs.getString("end_rua"));
                            jTextBairro.setText(rs.getString("end_bairro"));
                            jTextNumero.setText(rs.getString("end_numero"));
                            jTextCEP.setText(rs.getString("end_cep"));
                            jTextCidade.setText(rs.getString("end_cidade"));

                            jFTelefone1.setText(rs.getString("tel_telefone1"));
                            jFTelefone2.setText(rs.getString("tel_telefone2"));
                            jTextEmail.setText(rs.getString("e_mail"));
                            aux = 1;

                        }

                    }

                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Erro ao manipular dados, verifique os dados");
                    //Logger.getLogger(TelaCadastrarCurso.class.getName()).log(Level.SEVERE, null, ex);
                } catch (NullPointerException ex) {

                }

                break;
            }
            default: {
                JOptionPane.showMessageDialog(null, "Selecione um tipo válido");
                break;
            }

        }
        if (aux == 0) {
            JOptionPane.showMessageDialog(null, "Não existe cadastro para este funcionário!");
        }
    }
    private void jTextRuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextRuaActionPerformed


    }//GEN-LAST:event_jTextRuaActionPerformed

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButtonCancelarActionPerformed

    /**
     * Habilita os parametros para o tipo escolhido.
     *
     * @param evt
     */
    private void jButtonIrCadastroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonIrCadastroActionPerformed
        // TODO add your handling code here:
        this.tipoCadastro = jComboBoxDesejaCadastrar.getSelectedItem().toString();

        switch (this.tipoCadastro) {
            case "ADMINISTRATIVO": {
                jPanel1.setVisible(false);
                jPanelDadosPessoais.setVisible(true);
                jPanelContato.setVisible(true);
                jPanelExtra.setVisible(false);
                break;
            }
            case "INSTRUTOR": {
                jPanel1.setVisible(false);
                jPanelDadosPessoais.setVisible(true);
                jPanelContato.setVisible(true);
                jPanelExtra.setVisible(true);
                jLabelfuncao.setVisible(false);
                jComboBoxFuncao.setVisible(false);
                jComboBoxcurso.setVisible(true);
                jLabelcurso.setVisible(true);
                break;
            }
            case "DIRETOR": {
                jPanel1.setVisible(false);
                jPanelDadosPessoais.setVisible(true);
                jPanelContato.setVisible(true);
                jPanelExtra.setVisible(true);
                jLabelCarteira.setVisible(false);
                jComboBoxcurso.setVisible(false);
                jLabelcurso.setVisible(false);
                jCheckBoxD.setVisible(false);
                jCheckBoxE.setVisible(false);
                break;
            }
            default: {
                JOptionPane.showMessageDialog(null, "Selecione um tipo válido");
                break;
            }

        }
    }//GEN-LAST:event_jButtonIrCadastroActionPerformed

    /**
     * Salva as informações de acordo com o tipo escolhido.
     *
     * @param evt
     */
    private void jButtonSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalvarActionPerformed

        String nome = "";
        String cpf = "";
        String identidade = "";
        String dataEmissao = "";
        String dataNasc = "";
        String orgaoEx = "";
        String nivelEs = "";
        String dataAd = "";
        String dataDe = "";

        String s = "";
        char[] se = null;
        String sexo = "";
        String rua = "";
        String bairro = "";
        String numero = "";
        String CEP = "";
        String cidade = "";

        String telefone1 = "";
        String telefone2 = "";
        String email = "";

        nome = jTextNome.getText();
        cpf = jFCPF.getText();
        identidade = jTextIdentidade.getText();
        dataEmissao = jFDataEmissao.getText();
        dataNasc = jFDataNasc.getText();
        orgaoEx = jTextOrgao.getText();
        nivelEs = jComboNivelEsc.getSelectedItem().toString();
        dataAd = jFDataAdmissao.getText();
        dataDe = jFDataDemissao.getText();

        s = (String) jComboBoxSexo.getSelectedItem();
        se = s.toCharArray();
        sexo = String.valueOf(se[0]);
        rua = jTextRua.getText();
        bairro = jTextBairro.getText();
        numero = jTextNumero.getText();
        CEP = jTextCEP.getText();
        cidade = jTextCidade.getText();

        telefone1 = jFTelefone1.getText();
        telefone2 = jFTelefone2.getText();
        email = jTextEmail.getText();

        String id_auto;//capturar id da auto escola

        int resultado, resultado2;
        int aux = 0;
        ResultSet rs = null;
        String nomeMatriz = "";
        Conexao con = new Conexao();
        String verificaMatriz, tabela, valores;
        String tabela2, valores2;

        switch (this.tipoCadastro) {
            /**
             * ----------------------------------------------------------------------------------------
             * CADASTRO ADMINISTRATIVO
             */
            case "ADMINISTRATIVO": {

                //caso os campos estejam preenchidos
                if (!cpf.equals("   .   .   -  ") && !nome.isEmpty() && !identidade.isEmpty() && !email.isEmpty() && !rua.isEmpty() && !bairro.isEmpty()
                        && !numero.isEmpty() && !CEP.isEmpty() && !cidade.isEmpty()) {
                    System.out.println("Nome: " + nome + "\ncpf: " + cpf + "\nidetidade:" + identidade + "\ndata emissao: " + dataEmissao + "\ndata Nascimento: " + dataNasc
                            + "\norgao expedidor: " + orgaoEx + "\nnivel esocla: " + nivelEs + "\ndata admissao: " + dataAd + "\ndata Demissao: " + dataDe
                            + "\nsexo: " + sexo + "\nrua: " + rua + "\nbairro: " + bairro + "\nnumero: " + numero + "\nCEP: " + CEP + "\ncidade" + cidade
                            + "\ntelefone1: " + telefone1 + "\ntelefone2: " + telefone2 + "\nemail:" + email);

                    verificaMatriz = "SELECT cpf_func "
                            + "FROM funcionario";
                    rs = con.executaBusca(verificaMatriz);
                    try {
                        while (rs.next()) {
                            //verifica se o cliente já está cadastrado
                            if (rs.getString("cpf_func").equals(cpf)) {
                                aux = 1;
                            }
                        }
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(null, "Erro ao manipular dados, verifique os dados");
                        //Logger.getLogger(TelaCadastrarCurso.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (NullPointerException ex) {

                    }
                    if (aux == 1) {
                        JOptionPane.showMessageDialog(null, "Este CPF já esta cadastrado!");
                        jFCPF.setText("");
                    } else {

                        OperacoesBancoDeDados inserir = new OperacoesBancoDeDados();
                        if (dataDe.equals("  /  /    ")) {

                            tabela = "funcionario(cpf_func,car_data_de_emissao,car_orgao_expedidor,car_numero,     nome ,     data_nascimento,      sexo,     data_de_admissao,    tel_telefone1,     tel_telefone2,     e_mail,     nivel_escolaridade,     end_cep,     end_cidade,     end_rua,end_numero,     end_bairro,     id_aut)";
                            valores = "('" + cpf + "','" + dataEmissao + "','" + orgaoEx + "','" + identidade + "','" + nome + "','" + dataNasc + "','" + sexo + "','" + dataAd + "','" + telefone1 + "','" + telefone2 + "','" + email + "','" + nivelEs + "','" + CEP + "','" + cidade + "','" + rua + "','" + numero + "','" + bairro + "'," + PermissaoAcesso.getIdAutoEscola() + ")";

                        } else {

                            tabela = "funcionario(cpf_func,car_data_de_emissao,car_orgao_expedidor,car_numero,     nome ,     data_nascimento,      sexo,     data_de_admissao,     data_de_demissao,     tel_telefone1,     tel_telefone2,     e_mail,     nivel_escolaridade,     end_cep,     end_cidade,     end_rua,end_numero,     end_bairro,     id_aut)";
                            valores = "('" + cpf + "','" + dataEmissao + "','" + orgaoEx + "','" + identidade + "','" + nome + "','" + dataNasc + "','" + sexo + "','" + dataAd + "','" + dataDe + "','" + telefone1 + "','" + telefone2 + "','" + email + "','" + nivelEs + "','" + CEP + "','" + cidade + "','" + rua + "','" + numero + "','" + bairro + "'," + PermissaoAcesso.getIdAutoEscola() + ")";
                        }

                        resultado = inserir.inserirLinhasBD(tabela, valores);

                        tabela2 = "atendente(cpf_func)";
                        valores2 = "('" + cpf + "')";

                        resultado2 = inserir.inserirLinhasBD(tabela2, valores2);

                        if (resultado > 0 && resultado2 > 0) {
                            JOptionPane.showMessageDialog(null, "Cadastro realizado com sucesso!");
                            this.dispose();
                        } else {
                            JOptionPane.showMessageDialog(null, "Erro ao cadastrar funcionário!");
                        }

                    }
                } //se algum campo não foi preenchido
                else {
                    JOptionPane.showMessageDialog(null, "Ainda existem dados para serem inseridos");
                }

                break;
            }

            /**
             * --------------------------------------------------------------------------------------------
             * CADASTRO INSTRUTOR
             */
            case "INSTRUTOR": {
                String numRegistro = jTexNumReg.getText();
                String cap = jTextCapacitacao.getText();
                String curso = jComboBoxcurso.getSelectedItem().toString();
                char carteira = 0;

             

                    if (jCheckBoxD.isSelected()) {
                        carteira = 'D';
                    }
                    else if (jCheckBoxE.isSelected()) {
                        carteira = 'E';
                    }
                    else{
                        carteira = 'N';
                    }

                    //caso os campos estejam preenchidos
                    if (!cpf.equals("   .   .   -  ") && !nome.isEmpty() && !identidade.isEmpty() && !email.isEmpty() && !rua.isEmpty() && !bairro.isEmpty()
                            && !numero.isEmpty() && !CEP.isEmpty() && !cidade.isEmpty() && !numRegistro.isEmpty() && !cap.isEmpty()) {

                        System.out.println("Nome: " + nome + "\ncpf: " + cpf + "\nidetidade:" + identidade + "\ndata emissao: " + dataEmissao + "\ndata Nascimento: " + dataNasc
                                + "\norgao expedidor: " + orgaoEx + "\nnivel esocla: " + nivelEs + "\ndata admissao: " + dataAd + "\ndata Demissao: " + dataDe
                                + "\nsexo: " + sexo + "\nrua: " + rua + "\nbairro: " + bairro + "\nnumero: " + numero + "\nCEP: " + CEP + "\ncidade" + cidade
                                + "\ntelefone1: " + telefone1 + "\ntelefone2: " + telefone2 + "\nemail:" + email + "\nnum registro: " + numRegistro + "\ncapacitação: " + cap + "\ncarteira" + carteira);

                        verificaMatriz = "SELECT cpf_func "
                                + "FROM funcionario";
                        rs = con.executaBusca(verificaMatriz);
                        try {
                            while (rs.next()) {
                                //verifica se o funcionário já está cadastrado
                                if (rs.getString("cpf_func").equals(cpf)) {
                                    aux = 1;
                                }
                            }
                        } catch (SQLException ex) {
                            JOptionPane.showMessageDialog(null, "Erro ao manipular dados, verifique os dados");
                            //Logger.getLogger(TelaCadastrarCurso.class.getName()).log(Level.SEVERE, null, ex);

                        } catch (NullPointerException ex) {

                        }
                        if (aux == 1) {
                            JOptionPane.showMessageDialog(null, "Este CPF já esta cadastrado!");
                            jFCPF.setText("");
                        } else {
                            //inserindo dados na tabela funcionario 
                            OperacoesBancoDeDados inserir = new OperacoesBancoDeDados();
                            if (dataDe.equals("  /  /    ")) {

                                tabela = "funcionario(cpf_func,car_data_de_emissao,car_orgao_expedidor,car_numero,     nome ,     data_nascimento,      sexo,     data_de_admissao,    tel_telefone1,     tel_telefone2,     e_mail,     nivel_escolaridade,     end_cep,     end_cidade,     end_rua,end_numero,     end_bairro,     id_aut)";
                                valores = "('" + cpf + "','" + dataEmissao + "','" + orgaoEx + "','" + identidade + "','" + nome + "','" + dataNasc + "','" + sexo + "','" + dataAd + "','" + telefone1 + "','" + telefone2 + "','" + email + "','" + nivelEs + "','" + CEP + "','" + cidade + "','" + rua + "','" + numero + "','" + bairro + "'," + PermissaoAcesso.getIdAutoEscola() + ")";

                            } else {

                                tabela = "funcionario(cpf_func,car_data_de_emissao,car_orgao_expedidor,car_numero,     nome ,     data_nascimento,      sexo,     data_de_admissao,     data_de_demissao,     tel_telefone1,     tel_telefone2,     e_mail,     nivel_escolaridade,     end_cep,     end_cidade,     end_rua,end_numero,     end_bairro,     id_aut)";
                                valores = "('" + cpf + "','" + dataEmissao + "','" + orgaoEx + "','" + identidade + "','" + nome + "','" + dataNasc + "','" + sexo + "','" + dataAd + "','" + dataDe + "','" + telefone1 + "','" + telefone2 + "','" + email + "','" + nivelEs + "','" + CEP + "','" + cidade + "','" + rua + "','" + numero + "','" + bairro + "'," + PermissaoAcesso.getIdAutoEscola() + ")";
                            }
                            resultado = inserir.inserirLinhasBD(tabela, valores);

                            OperacoesBancoDeDados inserir2 = new OperacoesBancoDeDados();
                            tabela2 = "instrutor(cpf_func, car_categorias, car_numero_registro,capacitacao,tipo)";
                            valores2 = "('" + cpf + "','" + carteira + "','" + numRegistro + "','" + cap + "','" + curso + "')";
                            resultado2 = inserir2.inserirLinhasBD(tabela2, valores2);

                            if (resultado > 0 && resultado2 > 0) {
                                JOptionPane.showMessageDialog(null, "Cadastro realizado com sucesso!");
                                this.dispose();
                            } else {
                                JOptionPane.showMessageDialog(null, "Erro ao cadastrar funcionário!");
                            }
                            if (resultado2 > 0) {
                            } else {
                                JOptionPane.showMessageDialog(null, "Erro ao cadastrar dados específicos do instrutor!");
                            }

                        }
                    } //se algum campo não foi preenchido
                    else {
                        JOptionPane.showMessageDialog(null, "Ainda existem dados para serem inseridos");
                    }

                    //verificando as informações dos instrutores 
                    break;
                
            }
            /**
             * --------------------------------------------------------------------------------------------
             * CADASTRO DIRETOR
             */
            case "DIRETOR": {
                String funcao = jComboBoxFuncao.getSelectedItem().toString();
                String cap = jTextCapacitacao.getText();

                //caso os campos estejam preenchidos
                if (!cpf.equals("   .   .   -  ") && !nome.isEmpty() && !identidade.isEmpty() && !email.isEmpty() && !rua.isEmpty() && !bairro.isEmpty()
                        && !numero.isEmpty() && !CEP.isEmpty() && !cidade.isEmpty() && !funcao.equals("SELECIONE") && !cap.isEmpty()) {

                    verificaMatriz = "SELECT cpf_func "
                            + "FROM funcionario";
                    rs = con.executaBusca(verificaMatriz);
                    try {
                        while (rs.next()) {
                            //verifica se o cliente já está cadastrado
                            if (rs.getString("cpf_func").equals(cpf)) {
                                aux = 1;
                            }
                        }
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(null, "Erro ao manipular dados, verifique os dados");
                        //Logger.getLogger(TelaCadastrarCurso.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (NullPointerException ex) {

                    }
                    if (aux == 1) {
                        JOptionPane.showMessageDialog(null, "Este CPF já esta cadastrado!");
                        jFCPF.setText("");
                    } else {
                        //inserindo dados na tabela funcionario 
                        OperacoesBancoDeDados inserir = new OperacoesBancoDeDados();
                        if (dataDe.equals("  /  /    ")) {

                            tabela = "funcionario(cpf_func,car_data_de_emissao,car_orgao_expedidor,car_numero,     nome ,     data_nascimento,      sexo,     data_de_admissao,    tel_telefone1,     tel_telefone2,     e_mail,     nivel_escolaridade,     end_cep,     end_cidade,     end_rua,end_numero,     end_bairro,     id_aut)";
                            valores = "('" + cpf + "','" + dataEmissao + "','" + orgaoEx + "','" + identidade + "','" + nome + "','" + dataNasc + "','" + sexo + "','" + dataAd + "','" + telefone1 + "','" + telefone2 + "','" + email + "','" + nivelEs + "','" + CEP + "','" + cidade + "','" + rua + "','" + numero + "','" + bairro + "'," + PermissaoAcesso.getIdAutoEscola() + ")";

                        } else {

                            tabela = "funcionario(cpf_func,car_data_de_emissao,car_orgao_expedidor,car_numero,     nome ,     data_nascimento,      sexo,     data_de_admissao,     data_de_demissao,     tel_telefone1,     tel_telefone2,     e_mail,     nivel_escolaridade,     end_cep,     end_cidade,     end_rua,end_numero,     end_bairro,     id_aut)";
                            valores = "('" + cpf + "','" + dataEmissao + "','" + orgaoEx + "','" + identidade + "','" + nome + "','" + dataNasc + "','" + sexo + "','" + dataAd + "','" + dataDe + "','" + telefone1 + "','" + telefone2 + "','" + email + "','" + nivelEs + "','" + CEP + "','" + cidade + "','" + rua + "','" + numero + "','" + bairro + "'," + PermissaoAcesso.getIdAutoEscola() + ")";
                        }
                        resultado = inserir.inserirLinhasBD(tabela, valores);

                        //inserindo na teablea diretor
                        OperacoesBancoDeDados inserir2 = new OperacoesBancoDeDados();
                        tabela2 = "diretor (cpf_func, funcao, capacitacao)";
                        valores2 = "('" + cpf + "','" + funcao + "','" + cap + "')";
                        resultado2 = inserir2.inserirLinhasBD(tabela2, valores2);

                        if (resultado > 0 && resultado2 > 0) {
                            JOptionPane.showMessageDialog(null, "Cadastro realizado com sucesso!");
                            this.dispose();
                        } else {
                            JOptionPane.showMessageDialog(null, "Erro ao cadastrar funcionário!");
                        }
                        if (resultado2 > 0) {
                        } else {
                            JOptionPane.showMessageDialog(null, "Erro ao cadastrar dados específicos do diretor!");
                        }

                    }
                } //se algum campo não foi preenchido
                else {
                    JOptionPane.showMessageDialog(null, "Ainda existem dados para serem inseridos");
                }

                //verificando as informações dos instrutores 
                break;
            }
            default: {
                JOptionPane.showMessageDialog(null, "Selecione um tipo válido");
                break;
            }

        }
    }//GEN-LAST:event_jButtonSalvarActionPerformed

    /**
     * ATUALIZAR DADOS.
     *
     * @param evt
     */
    private void jButtonAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAtualizarActionPerformed
        // TODO add your handling code here:
        OperacoesBancoDeDados atualizaDados = new OperacoesBancoDeDados();
        String tabela, tabela2;
        String condicao, condicao2;

        switch (this.tipoCadastro) {
            case "ADMINISTRATIVO": { //---------------------------------------att administrativo----------------------------------------------------
                tabela = "funcionario";
                condicao = "cpf_func='" + this.procurAux + "'";
                tabela2 = "atendente";
                condicao2 = "cpf_func='" + this.procurAux + "'";

                String nome = jTextNome.getText();
                String cpf = jFCPF.getText();
                String identidade = jTextIdentidade.getText();
                String dataEmissao = jFDataEmissao.getText();
                String dataNasc = jFDataNasc.getText();
                String orgaoEx = jTextOrgao.getText();
                String nivelEs = jComboNivelEsc.getSelectedItem().toString();
                String dataAd = jFDataAdmissao.getText();
                String dataDe = jFDataDemissao.getText();
                String sexo = jComboBoxSexo.getSelectedItem().toString();

                String rua = jTextRua.getText();
                String bairro = jTextBairro.getText();
                String numero = jTextNumero.getText();
                String CEP = jTextCEP.getText();
                String cidade = jTextCidade.getText();

                String telefone1 = jFTelefone1.getText();
                String telefone2 = jFTelefone2.getText();
                String email = jTextEmail.getText();

                atualizaDados.atualizarLinhasBD(tabela2, "cpf_func", cpf, condicao2);
                atualizaDados.atualizarLinhasBD(tabela, "cpf_func", "'" + cpf + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "nome", "'" + nome + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "car_data_de_emissao", "'" + dataEmissao + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "car_orgao_expedidor", "'" + orgaoEx + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "car_numero", "'" + identidade + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "data_nascimento", "'" + dataNasc + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "sexo", "'" + sexo + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "data_de_admissao", "'" + dataAd + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "data_de_demissao", "'" + dataDe + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "tel_telefone1", "'" + telefone1 + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "tel_telefone2", "'" + telefone2 + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "e_mail", "'" + email + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "nivel_escolaridade", "'" + nivelEs + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "end_cep", "'" + CEP + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "end_cidade", "'" + cidade + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "end_rua", "'" + rua + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "end_numero", "'" + numero + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "end_bairro", "'" + bairro + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "id_aut", "'" + PermissaoAcesso.getIdAutoEscola() + "'", condicao);
                JOptionPane.showMessageDialog(null, "Atualização realizada com sucesso!");
                this.dispose();
                break;
            }

            case "INSTRUTOR": {//------------------------------------ ATT INSTRUTOR -----------------------------------------------
                char carteira = 0;
                if (jCheckBoxD.isSelected()) {
                    carteira = 'D';
                }
                if (jCheckBoxE.isSelected()) {
                    carteira = 'E';
                }
                String numReg = jTexNumReg.getText();
                String cap = jTextCapacitacao.getText();
                String curso = jComboBoxcurso.getSelectedItem().toString();

                tabela = "funcionario";
                condicao = "cpf_func='" + this.procurAux + "'";
                tabela2 = "instrutor";
                condicao2 = "cpf_func='" + this.procurAux + "'";

                String nome = jTextNome.getText();
                String cpf = jFCPF.getText();
                String identidade = jTextIdentidade.getText();
                String dataEmissao = jFDataEmissao.getText();
                String dataNasc = jFDataNasc.getText();
                String orgaoEx = jTextOrgao.getText();
                String nivelEs = jComboNivelEsc.getSelectedItem().toString();
                String dataAd = jFDataAdmissao.getText();
                String dataDe = jFDataDemissao.getText();
                String sexo = jComboBoxSexo.getSelectedItem().toString();

                String rua = jTextRua.getText();
                String bairro = jTextBairro.getText();
                String numero = jTextNumero.getText();
                String CEP = jTextCEP.getText();
                String cidade = jTextCidade.getText();

                String telefone1 = jFTelefone1.getText();
                String telefone2 = jFTelefone2.getText();
                String email = jTextEmail.getText();

                atualizaDados.atualizarLinhasBD(tabela, "cpf_func", "'" + cpf + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "nome", "'" + nome + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "car_data_de_emissao", "'" + dataEmissao + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "car_orgao_expedidor", "'" + orgaoEx + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "car_numero", "'" + identidade + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "data_nascimento", "'" + dataNasc + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "sexo", "'" + sexo + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "data_de_admissao", "'" + dataAd + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "data_de_demissao", "'" + dataDe + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "tel_telefone1", "'" + telefone1 + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "tel_telefone2", "'" + telefone2 + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "e_mail", "'" + email + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "nivel_escolaridade", "'" + nivelEs + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "end_cep", "'" + CEP + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "end_cidade", "'" + cidade + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "end_rua", "'" + rua + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "end_numero", "'" + numero + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "end_bairro", "'" + bairro + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "id_aut", "'" + PermissaoAcesso.getIdAutoEscola() + "'", condicao);

                atualizaDados.atualizarLinhasBD(tabela2, "cpf_func", "'" + cpf + "'", condicao2);
                atualizaDados.atualizarLinhasBD(tabela2, "car_categorias", "'" + carteira + "'", condicao2);
                atualizaDados.atualizarLinhasBD(tabela2, "car_numero_registro", "'" + numReg + "'", condicao2);
                atualizaDados.atualizarLinhasBD(tabela2, "capacitacao", "'" + cap + "'", condicao2);
                atualizaDados.atualizarLinhasBD(tabela2, "tipo", "'" + curso + "'", condicao2);
                JOptionPane.showMessageDialog(null, "Atualização realizada com sucesso!");
                this.dispose();

                break;
            }

            case "DIRETOR": {//----------------------------------ATT DIRETOR---------------------------------------------------------

                String funcao = jComboBoxFuncao.getSelectedItem().toString();
                String cap = jTextCapacitacao.getText();

                tabela = "funcionario";
                condicao = "cpf_func='" + this.procurAux + "'";

                tabela2 = "diretor";
                condicao2 = "cpf_func='" + this.procurAux + "'";

                String nome = jTextNome.getText();
                String cpf = jFCPF.getText();
                String identidade = jTextIdentidade.getText();
                String dataEmissao = jFDataEmissao.getText();
                String dataNasc = jFDataNasc.getText();
                String orgaoEx = jTextOrgao.getText();
                String nivelEs = jComboNivelEsc.getSelectedItem().toString();
                String dataAd = jFDataAdmissao.getText();
                String dataDe = jFDataDemissao.getText();
                String sexo = jComboBoxSexo.getSelectedItem().toString();

                String rua = jTextRua.getText();
                String bairro = jTextBairro.getText();
                String numero = jTextNumero.getText();
                String CEP = jTextCEP.getText();
                String cidade = jTextCidade.getText();

                String telefone1 = jFTelefone1.getText();
                String telefone2 = jFTelefone2.getText();
                String email = jTextEmail.getText();

                atualizaDados.atualizarLinhasBD(tabela, "cpf_func", "'" + cpf + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "nome", "'" + nome + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "car_data_de_emissao", "'" + dataEmissao + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "car_orgao_expedidor", "'" + orgaoEx + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "car_numero", "'" + identidade + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "data_nascimento", "'" + dataNasc + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "sexo", "'" + sexo + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "data_de_admissao", "'" + dataAd + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "data_de_demissao", "'" + dataDe + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "tel_telefone1", "'" + telefone1 + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "tel_telefone2", "'" + telefone2 + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "e_mail", "'" + email + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "nivel_escolaridade", "'" + nivelEs + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "end_cep", "'" + CEP + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "end_cidade", "'" + cidade + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "end_rua", "'" + rua + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "end_numero", "'" + numero + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "end_bairro", "'" + bairro + "'", condicao);
                atualizaDados.atualizarLinhasBD(tabela, "id_aut", "'" + PermissaoAcesso.getIdAutoEscola() + "'", condicao);

                atualizaDados.atualizarLinhasBD(tabela2, "cpf_func", "'" + cpf + "'", condicao2);
                atualizaDados.atualizarLinhasBD(tabela2, "funcao", "'" + funcao + "'", condicao2);
                atualizaDados.atualizarLinhasBD(tabela2, "capacitacao", "'" + cap + "'", condicao2);

                JOptionPane.showMessageDialog(null, "Atualização realizada com sucesso!");
                this.dispose();
                break;
            }
            default: {
                JOptionPane.showMessageDialog(null, "Selecione um tipo válido");
                break;
            }

        }

    }//GEN-LAST:event_jButtonAtualizarActionPerformed

    /**
     * EXCLUIR FUNCIONARIO.
     *
     * @param evt
     */
    private void jButtonExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExcluirActionPerformed
        // TODO add your handling code here:
        String tabela1, tabela2;
        int resultado1, resultado2;
        switch (this.tipoCadastro) {
            case "ADMINISTRATIVO": { //-----------------------------------------EXCLUIR ADINISTRATIVO ----------------------------------
                OperacoesBancoDeDados excluir = new OperacoesBancoDeDados();
                tabela1 = "atendente";
                tabela2 = "funcionario";
                String condicao = "cpf_func='" + this.procurAux + "'";

                resultado1 = excluir.deletarLinhasBD(tabela1, condicao);
                resultado2 = excluir.deletarLinhasBD(tabela2, condicao);
                if (resultado1 > 0 && resultado2 > 0) {

                    JOptionPane.showMessageDialog(null, "Excluido com sucesso");
                    this.dispose();

                } else {
                    JOptionPane.showMessageDialog(null, "Erro durante a exclusão. Tente novamente!");
                }
                break;
            }

            case "INSTRUTOR": {//----------------------------- EXCLUIR INSTRUTOR ------------------------------------------
                OperacoesBancoDeDados excluir = new OperacoesBancoDeDados();
                tabela1 = "instrutor";
                tabela2 = "funcionario";
                String condicao = "cpf_func='" + this.procurAux + "'";

                resultado1 = excluir.deletarLinhasBD(tabela1, condicao);
                resultado2 = excluir.deletarLinhasBD(tabela2, condicao);
                if (resultado1 > 0 && resultado2 > 0) {

                    JOptionPane.showMessageDialog(null, "Excluido com sucesso");
                    this.dispose();

                } else {
                    JOptionPane.showMessageDialog(null, "Erro durante a exclusão. Tente novamente!");
                }
                break;

            }

            case "DIRETOR": { // -------------------------------- EXCLUIR DIRETOR ---------------------------------------------------
                OperacoesBancoDeDados excluir = new OperacoesBancoDeDados();
                tabela1 = "diretor";
                tabela2 = "funcionario";
                String condicao = "cpf_func='" + this.procurAux + "'";

                resultado1 = excluir.deletarLinhasBD(tabela1, condicao);
                resultado2 = excluir.deletarLinhasBD(tabela2, condicao);
                if (resultado1 > 0 && resultado2 > 0) {

                    JOptionPane.showMessageDialog(null, "Excluido com sucesso");
                    this.dispose();

                } else {
                    JOptionPane.showMessageDialog(null, "Erro durante a exclusão. Tente novamente!");
                }
                break;
            }

            default: {
                JOptionPane.showMessageDialog(null, "Selecione um tipo válido");
                break;
            }

        }


    }//GEN-LAST:event_jButtonExcluirActionPerformed

    private void jComboBoxDesejaCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDesejaCadastrarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxDesejaCadastrarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonAtualizar;
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonExcluir;
    private javax.swing.JButton jButtonIrCadastro;
    private javax.swing.JButton jButtonSalvar;
    private javax.swing.JCheckBox jCheckBoxD;
    private javax.swing.JCheckBox jCheckBoxE;
    private javax.swing.JComboBox<String> jComboBoxDesejaCadastrar;
    private javax.swing.JComboBox<String> jComboBoxFuncao;
    private javax.swing.JComboBox<String> jComboBoxSexo;
    private javax.swing.JComboBox<String> jComboBoxcurso;
    private javax.swing.JComboBox<String> jComboNivelEsc;
    private javax.swing.JFormattedTextField jFCPF;
    private javax.swing.JFormattedTextField jFDataAdmissao;
    private javax.swing.JFormattedTextField jFDataDemissao;
    private javax.swing.JFormattedTextField jFDataEmissao;
    private javax.swing.JFormattedTextField jFDataNasc;
    private javax.swing.JFormattedTextField jFTelefone1;
    private javax.swing.JFormattedTextField jFTelefone2;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelCap;
    private javax.swing.JLabel jLabelCarteira;
    private javax.swing.JLabel jLabelNumReg;
    private javax.swing.JLabel jLabelcurso;
    private javax.swing.JLabel jLabelfuncao;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelContato;
    private javax.swing.JPanel jPanelDadosPessoais;
    private javax.swing.JPanel jPanelExtra;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTexNumReg;
    private javax.swing.JTextField jTextBairro;
    private javax.swing.JTextField jTextCEP;
    private javax.swing.JTextArea jTextCapacitacao;
    private javax.swing.JTextField jTextCidade;
    private javax.swing.JTextField jTextEmail;
    private javax.swing.JTextField jTextIdentidade;
    private javax.swing.JTextField jTextNome;
    private javax.swing.JTextField jTextNumero;
    private javax.swing.JTextField jTextOrgao;
    private javax.swing.JTextField jTextRua;
    // End of variables declaration//GEN-END:variables
}

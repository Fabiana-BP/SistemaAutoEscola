/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Views;

import ConexaoPostgres.Conexao;
import codigo.OperacoesBancoDeDados;
import codigo.PermissaoAcesso;
import java.awt.Dimension;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author USUARIO
 */
public class TelaCadastrarTurma extends javax.swing.JInternalFrame {

    LinkedList<String> cursos = new LinkedList<>();
    LinkedList<Integer> idCursos = new LinkedList<>();
    LinkedList<String> instrutores = new LinkedList<>();
    LinkedList<String> cpfInstrutores = new LinkedList<>();

    /**
     * Creates new form TelaCadastrarTurma
     */
    public TelaCadastrarTurma() {
        initComponents();

        //preencher com os cursos existentes
        int aux = 0;
        ResultSet rs = null;
        Conexao con = new Conexao();
        String verificaMatriz;

        verificaMatriz = "SELECT nome "
                + "FROM cursos";

        rs = con.executaBusca(verificaMatriz);

        try {
            while (rs.next()) {
                jComboBoxCurso.insertItemAt(rs.getString("nome"), aux);
                aux++;

            }
        } catch (SQLException ex) {

        } catch (NullPointerException ex) {

        }
        aux = 0;
        //preencher os professores de turmas teoricas
        verificaMatriz = "SELECT F.nome "
                + "FROM funcionario F, instrutor I "
                + "WHERE I.tipo='" + "TEORICO" + "'" + " AND " + " F.cpf_func=I.cpf_func" + " AND " + "id_aut=" + PermissaoAcesso.getIdAutoEscola();

        con = new Conexao();
        rs = con.executaBusca(verificaMatriz);

        try {
            while (rs.next()) {
                jComboBoxProfessor.insertItemAt(rs.getString("nome"), aux);
                aux++;

            }
        } catch (SQLException ex) {
        } catch (NullPointerException ex) {

        }
    }

    public void setPosicao() {
        Dimension d = this.getDesktopPane().getSize();
        this.setLocation((d.width - this.getSize().width) / 2, (d.height - this.getSize().height) / 2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextMaxAlunos = new javax.swing.JTextField();
        jButtonSalvar = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();
        jFormattedHorario = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jComboBoxProfessor = new javax.swing.JComboBox<>();
        jComboBoxCurso = new javax.swing.JComboBox<>();

        setClosable(true);
        setTitle("Cadastrar Turmas");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Cadastro Turma Teórica");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Horário início:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Número máximo de alunos:");

        jTextMaxAlunos.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jButtonSalvar.setText("Salvar");
        jButtonSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalvarActionPerformed(evt);
            }
        });

        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        try {
            jFormattedHorario.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jFormattedHorario.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jFormattedHorario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFormattedHorarioActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Curso:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Professor:");

        jComboBoxProfessor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione" }));

        jComboBoxCurso.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione" }));
        jComboBoxCurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCursoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(jButtonCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(31, 31, 31)
                                .addComponent(jTextMaxAlunos, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jFormattedHorario, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxCurso, 0, 503, Short.MAX_VALUE)
                                    .addComponent(jComboBoxProfessor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(246, 246, 246)
                        .addComponent(jLabel1)))
                .addContainerGap(95, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addGap(51, 51, 51)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jComboBoxCurso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jComboBoxProfessor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jFormattedHorario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextMaxAlunos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jFormattedHorarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFormattedHorarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFormattedHorarioActionPerformed

    private void jButtonSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalvarActionPerformed
        String hora = jFormattedHorario.getText();
        String numMax = jTextMaxAlunos.getText();
        String curso = jComboBoxCurso.getSelectedItem().toString();
        String nomeProfessor = jComboBoxProfessor.getSelectedItem().toString();

        if (!curso.equals("selecione") && !nomeProfessor.equals("selecione")) {
            String verificaMatriz;
            int id_Curso = 0;//receber o id de um curso cadastrado
            int aux = 0;
            String id_curso = ""; //receber o id do curso selecionado
            String cpf_funcionario = "";//receber o cpf do funcionario que leciona para essa turma
            int resultado;
            ResultSet rs = null;

            /**
             * Várias turmas podem estar cadastradas no mesmo horario, mas nao
             * com o mesmo professor
             *
             */
            Conexao con = new Conexao();
            if ((!hora.equals("  :  ")) && (!numMax.equals(""))) {
                rs = null;

                //busca pelo cpf do professor
                verificaMatriz = "SELECT *"
                        + "FROM funcionario F, instrutor I "
                        + "WHERE I.tipo='" + "TEORICO" + "'" + " AND " + "F.nome='" + nomeProfessor + "'" + " AND " + "id_aut=" + PermissaoAcesso.getIdAutoEscola();

                con = new Conexao();
                rs = con.executaBusca(verificaMatriz);

                try {
                    if (rs.next()) {
                        cpf_funcionario = rs.getString("cpf_func");

                    }
                } catch (SQLException ex) {
                } catch (NullPointerException ex) {

                }

                //busca pelo id do curso
                verificaMatriz = "SELECT * "
                        + "FROM cursos "
                        + "WHERE nome='" + curso + "'";

                con = new Conexao();
                rs = con.executaBusca(verificaMatriz);

                try {
                    if (rs.next()) {
                        id_curso = rs.getString("id_curso");

                    }
                } catch (SQLException ex) {
                    
                } catch (NullPointerException ex) {

                }

                verificaMatriz = "SELECT * "
                        + "FROM turmas_teoricas "
                        + "WHERE cpf_func='" + cpf_funcionario + "'" + " AND " + "horario ='" + hora + "'";

                con = new Conexao();
                rs = con.executaBusca(verificaMatriz);
                try {
                    if (rs.next()) {
                        JOptionPane.showMessageDialog(null, "Existe uma turma cadastrada no mesmo horário, com o mesmo professor!");
                        aux = 1;
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Erro ao manipular dados, verifique os dados");
                    //Logger.getLogger(TelaCadastrarTurma.class.getName()).log(Level.SEVERE, null, ex);
                } catch (NullPointerException ex) {

                }

                //condições sao validas para o cadastro
                if (aux == 0) {
                    String tabela = "turmas_teoricas(id_turmas,horario, numero_maximo_de_alunos, id_curso,cpf_func)";
                    String valores = "(" + "default" + ",'" + hora + "','" + numMax + "','" + id_curso + "','" + cpf_funcionario + "')";

                    OperacoesBancoDeDados inserir = new OperacoesBancoDeDados();
                    resultado = inserir.inserirLinhasBD(tabela, valores);

                    if (resultado > 0) {
                        JOptionPane.showMessageDialog(null, "Cadastro realizado com sucesso!");
                    } else {
                        JOptionPane.showMessageDialog(null, "Erro ao cadastrar Turma!");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Ainda existem campos para serem preenchidos!");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Selecione tipos válidos!");
        }

    }//GEN-LAST:event_jButtonSalvarActionPerformed

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButtonCancelarActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        /* int idAut = PermissaoAcesso.getIdAutoEscola();

        int id_Curso = 0;//receber o id de um curso cadastrado

        int resultado;
        ResultSet rs = null;
        Conexao con = new Conexao();

        /*Buscar cursos*/
 /* String verificaCursos = "SELECT C.id_curso,C.nome "
                + "FROM cursos C, oferece O "
                + "WHERE C.id_curso= O.id_curso AND O.id_aut=" + idAut;//buscar apenas os cursos dessa auto-escola

        rs = con.executaBusca(verificaCursos);
        try {
            while (rs.next()) {
                int id_curso = rs.getInt("id_curso");
                String nome_Curso = rs.getString("nome");
                idCursos.add(id_curso);
                cursos.add(nome_Curso);

            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Nenhum curso cadastrado. Por favor, cadastre algum curso primeiro!");
            ex.printStackTrace();
            this.dispose();

        }
        if (rs != null) {

            // se encontrou cursos salva na caixa de combinação
            cursos.forEach((nome) -> {
                jComboBoxCurso.addItem(nome);
            });
        }*/

 /*Buscar instrutores*/
 /* String verificaInstrutores = "SELECT F.cpf_func,F.nome "
                + "FROM instrutor I, funcionario F"
                + " WHERE I.cpf_func=F.cpf_func AND F.id_aut=" + idAut;//buscar apenas os instrutores dessa auto-escola
        con = new Conexao();
        rs = con.executaBusca(verificaCursos);
        try {
            while (rs.next()) {
                String cpf_func = rs.getString("cpf_func");
                String nome_func = rs.getString("nome");
                cpfInstrutores.add(cpf_func);
                instrutores.add(nome_func);
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Nenhum instrutor cadastrado. Por favor, cadastre algum instrutor primeiro!");
            ex.printStackTrace();
            this.dispose();
        }

        if (rs != null) {// se encontrou cursos salva na caixa de combinação
            instrutores.forEach((nome) -> {
                jComboBoxProfessor.addItem(nome);
            });
    }*/

    }//GEN-LAST:event_formComponentShown

    private void jComboBoxCursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCursoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxCursoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonSalvar;
    private javax.swing.JComboBox<String> jComboBoxCurso;
    private javax.swing.JComboBox<String> jComboBoxProfessor;
    private javax.swing.JFormattedTextField jFormattedHorario;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextMaxAlunos;
    // End of variables declaration//GEN-END:variables
}
